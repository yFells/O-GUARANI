#!/usr/bin/env python3
"""
Teste R√°pido do Chatbot O Guarani
Execute este script para ver o sistema funcionando imediatamente
"""

# Verifica√ß√£o e instala√ß√£o de depend√™ncias
try:
    from sklearn.feature_extraction.text import TfidfVectorizer
    from sklearn.metrics.pairwise import cosine_similarity
    import numpy as np
except ImportError:
    print("Instalando depend√™ncias necess√°rias...")
    import subprocess
    import sys
    subprocess.check_call([sys.executable, "-m", "pip", "install", "scikit-learn", "numpy"])
    from sklearn.feature_extraction.text import TfidfVectorizer
    from sklearn.metrics.pairwise import cosine_similarity
    import numpy as np

import re
from datetime import datetime

class ChatbotTeste:
    """Vers√£o m√≠nima do chatbot para demonstra√ß√£o r√°pida"""
    
    def __init__(self):
        # Base de conhecimento sobre O Guarani
        self.base = {
            "peri": "Peri √© o protagonista ind√≠gena de O Guarani, um goitac√° de for√ßa excepcional e lealdade absoluta a Cec√≠lia. Representa o ideal do 'bom selvagem' rom√¢ntico.",
            
            "cecilia": "Cec√≠lia (Ceci) √© a filha de Dom Ant√¥nio de Mariz, jovem portuguesa pura e bondosa que desperta a devo√ß√£o de Peri. Simboliza a inoc√™ncia europeia.",
            
            "antonio": "Dom Ant√¥nio de Mariz √© o nobre portugu√™s propriet√°rio do castelo √†s margens do Paquequer, pai de Cec√≠lia e homem de honra que respeita Peri.",
            
            "enredo": "Romance passado no s√©culo XVII sobre o amor entre o √≠ndio Peri e a portuguesa Cec√≠lia, envolvendo conflitos com aimor√©s e a destrui√ß√£o do castelo.",
            
            "aimores": "Os aimor√©s s√£o a tribo inimiga feroz que amea√ßa constantemente os habitantes do castelo, representando o perigo selvagem na obra.",
            
            "natureza": "Alencar descreve exuberantemente a natureza brasileira - florestas, rios, fauna - como personagem quase vivo da narrativa rom√¢ntica."
        }
        
        # Configurar sistema de busca
        self.vectorizer = TfidfVectorizer(
            lowercase=True, 
            ngram_range=(1, 2),
            max_features=500
        )
        
        # Treinar com base de conhecimento
        textos = list(self.base.values())
        self.matriz = self.vectorizer.fit_transform(textos)
        self.chaves = list(self.base.keys())
        
        print("‚úÖ Chatbot O Guarani inicializado!")
        print(f"üìö Base: {len(self.base)} t√≥picos")
        print(f"üî§ Vocabul√°rio: {len(self.vectorizer.vocabulary_)} termos")
    
    def consultar(self, pergunta):
        """Processa uma pergunta e retorna resposta"""
        # Vectorizar pergunta
        vetor_pergunta = self.vectorizer.transform([pergunta.lower()])
        
        # Calcular similaridades
        similarities = cosine_similarity(vetor_pergunta, self.matriz).flatten()
        
        # Encontrar melhor match
        melhor_idx = np.argmax(similarities)
        melhor_sim = similarities[melhor_idx]
        
        if melhor_sim > 0.1:  # Threshold m√≠nimo
            resposta = self.base[self.chaves[melhor_idx]]
            confianca = "Alta" if melhor_sim > 0.5 else "M√©dia" if melhor_sim > 0.3 else "Baixa"
        else:
            resposta = "N√£o encontrei informa√ß√µes sobre isso em O Guarani. Tente perguntar sobre Peri, Cec√≠lia, enredo, etc."
            confianca = "N/A"
        
        return resposta, melhor_sim, confianca
    
    def teste_completo(self):
        """Executa bateria de testes"""
        perguntas = [
            "Quem √© Peri?",
            "Fale sobre Cec√≠lia", 
            "Qual o enredo do livro?",
            "Quem √© Dom Ant√¥nio?",
            "O que s√£o aimor√©s?",
            "Como √© a natureza no livro?",
            "Quem escreveu a obra?"  # Esta deve falhar
        ]
        
        print(f"\nüß™ EXECUTANDO {len(perguntas)} TESTES:")
        print("="*60)
        
        resultados = []
        
        for i, pergunta in enumerate(perguntas, 1):
            resposta, similaridade, confianca = self.consultar(pergunta)
            
            print(f"\n{i}. ‚ùì {pergunta}")
            print(f"   ü§ñ {resposta[:80]}...")
            print(f"   üìä Confian√ßa: {confianca} (sim: {similaridade:.3f})")
            
            resultados.append({
                'pergunta': pergunta,
                'similaridade': similaridade,
                'confianca': confianca,
                'sucesso': confianca != "N/A"
            })
        
        # Estat√≠sticas finais
        sucessos = sum(1 for r in resultados if r['sucesso'])
        taxa_sucesso = (sucessos / len(resultados)) * 100
        sim_media = np.mean([r['similaridade'] for r in resultados if r['sucesso']])
        
        print(f"\nüìà RESULTADOS:")
        print(f"   Perguntas respondidas: {sucessos}/{len(resultados)}")
        print(f"   Taxa de sucesso: {taxa_sucesso:.1f}%")
        print(f"   Similaridade m√©dia: {sim_media:.3f}")
        
        return resultados

def demo_interativo():
    """Demonstra√ß√£o interativa simples"""
    chatbot = ChatbotTeste()
    
    # Executar teste autom√°tico
    resultados = chatbot.teste_completo()
    
    print(f"\nüí¨ MODO INTERATIVO (digite 'sair' para encerrar):")
    print("="*50)
    
    while True:
        try:
            pergunta = input("\nüôã Voc√™: ").strip()
            
            if not pergunta or pergunta.lower() in ['sair', 'exit']:
                print("üëã At√© logo!")
                break
                
            resposta, sim, conf = chatbot.consultar(pergunta)
            print(f"ü§ñ Bot: {resposta}")
            print(f"üìä Confian√ßa: {conf} ({sim:.3f})")
            
        except KeyboardInterrupt:
            print("\nüëã Encerrando...")
            break

def teste_rapido():
    """Execu√ß√£o r√°pida apenas com testes autom√°ticos"""
    print("üöÄ TESTE R√ÅPIDO DO CHATBOT O GUARANI")
    print("="*50)
    
    chatbot = ChatbotTeste()
    resultados = chatbot.teste_completo()
    
    print(f"\n‚úÖ Teste conclu√≠do!")
    print(f"Sistema funcionando corretamente.")
    
    # Demonstrar uma consulta espec√≠fica
    print(f"\nüéØ EXEMPLO DE CONSULTA DETALHADA:")
    print("-" * 40)
    
    pergunta_exemplo = "Quem √© o protagonista de O Guarani?"
    resposta, sim, conf = chatbot.consultar(pergunta_exemplo)
    
    print(f"Pergunta: {pergunta_exemplo}")
    print(f"Resposta: {resposta}")
    print(f"Confian√ßa: {conf} (similaridade: {sim:.3f})")
    
    return chatbot

# Execu√ß√£o autom√°tica quando o script √© executado
if __name__ == "__main__":
    import sys
    
    # Verificar argumentos
    if len(sys.argv) > 1 and sys.argv[1] == "--interativo":
        demo_interativo()
    else:
        # Execu√ß√£o padr√£o: teste r√°pido
        chatbot = teste_rapido()
        
        print(f"\nPara modo interativo, execute:")
        print(f"python {__file__} --interativo")
        
        print(f"\nOu use o chatbot diretamente:")
        print(f"chatbot.consultar('sua pergunta aqui')")
